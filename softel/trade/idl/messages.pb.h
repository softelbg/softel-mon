// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_INCLUDED_messages_2eproto
#define PROTOBUF_INCLUDED_messages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto 

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_2eproto
namespace SF {
namespace TRADE {
class BaseMessageProto;
class BaseMessageProtoDefaultTypeInternal;
extern BaseMessageProtoDefaultTypeInternal _BaseMessageProto_default_instance_;
class EmptyMessageProto;
class EmptyMessageProtoDefaultTypeInternal;
extern EmptyMessageProtoDefaultTypeInternal _EmptyMessageProto_default_instance_;
class FlowControlProto;
class FlowControlProtoDefaultTypeInternal;
extern FlowControlProtoDefaultTypeInternal _FlowControlProto_default_instance_;
class MarketDataProto;
class MarketDataProtoDefaultTypeInternal;
extern MarketDataProtoDefaultTypeInternal _MarketDataProto_default_instance_;
class UpdateMessageProto;
class UpdateMessageProtoDefaultTypeInternal;
extern UpdateMessageProtoDefaultTypeInternal _UpdateMessageProto_default_instance_;
}  // namespace TRADE
}  // namespace SF
namespace google {
namespace protobuf {
template<> ::SF::TRADE::BaseMessageProto* Arena::CreateMaybeMessage<::SF::TRADE::BaseMessageProto>(Arena*);
template<> ::SF::TRADE::EmptyMessageProto* Arena::CreateMaybeMessage<::SF::TRADE::EmptyMessageProto>(Arena*);
template<> ::SF::TRADE::FlowControlProto* Arena::CreateMaybeMessage<::SF::TRADE::FlowControlProto>(Arena*);
template<> ::SF::TRADE::MarketDataProto* Arena::CreateMaybeMessage<::SF::TRADE::MarketDataProto>(Arena*);
template<> ::SF::TRADE::UpdateMessageProto* Arena::CreateMaybeMessage<::SF::TRADE::UpdateMessageProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SF {
namespace TRADE {

enum EnMsgTypeProto {
  Undefined = 0,
  setMachineOwnerRequest = 1,
  getMachineOwnerRequest = 2,
  UserMessageProtoResponse = 3,
  EmptyMessageProtoResponse = 4,
  EnMsgTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnMsgTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnMsgTypeProto_IsValid(int value);
const EnMsgTypeProto EnMsgTypeProto_MIN = Undefined;
const EnMsgTypeProto EnMsgTypeProto_MAX = EmptyMessageProtoResponse;
const int EnMsgTypeProto_ARRAYSIZE = EnMsgTypeProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnMsgTypeProto_descriptor();
inline const ::std::string& EnMsgTypeProto_Name(EnMsgTypeProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnMsgTypeProto_descriptor(), value);
}
inline bool EnMsgTypeProto_Parse(
    const ::std::string& name, EnMsgTypeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnMsgTypeProto>(
    EnMsgTypeProto_descriptor(), name, value);
}
enum EnFlowControlProto {
  Fetch = 0,
  FetchRequest = 1,
  SetFetch = 2,
  Ping = 3,
  EnFlowControlProto_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnFlowControlProto_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnFlowControlProto_IsValid(int value);
const EnFlowControlProto EnFlowControlProto_MIN = Fetch;
const EnFlowControlProto EnFlowControlProto_MAX = Ping;
const int EnFlowControlProto_ARRAYSIZE = EnFlowControlProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnFlowControlProto_descriptor();
inline const ::std::string& EnFlowControlProto_Name(EnFlowControlProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnFlowControlProto_descriptor(), value);
}
inline bool EnFlowControlProto_Parse(
    const ::std::string& name, EnFlowControlProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnFlowControlProto>(
    EnFlowControlProto_descriptor(), name, value);
}
// ===================================================================

class MarketDataProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SF.TRADE.MarketDataProto) */ {
 public:
  MarketDataProto();
  virtual ~MarketDataProto();

  MarketDataProto(const MarketDataProto& from);

  inline MarketDataProto& operator=(const MarketDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketDataProto(MarketDataProto&& from) noexcept
    : MarketDataProto() {
    *this = ::std::move(from);
  }

  inline MarketDataProto& operator=(MarketDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataProto* internal_default_instance() {
    return reinterpret_cast<const MarketDataProto*>(
               &_MarketDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MarketDataProto* other);
  friend void swap(MarketDataProto& a, MarketDataProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDataProto* New() const final {
    return CreateMaybeMessage<MarketDataProto>(NULL);
  }

  MarketDataProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketDataProto& from);
  void MergeFrom(const MarketDataProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // double bid = 2;
  void clear_bid();
  static const int kBidFieldNumber = 2;
  double bid() const;
  void set_bid(double value);

  // double ask = 3;
  void clear_ask();
  static const int kAskFieldNumber = 3;
  double ask() const;
  void set_ask(double value);

  // double volume = 4;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  double volume() const;
  void set_volume(double value);

  // int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SF.TRADE.MarketDataProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  double bid_;
  double ask_;
  double volume_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseMessageProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SF.TRADE.BaseMessageProto) */ {
 public:
  BaseMessageProto();
  virtual ~BaseMessageProto();

  BaseMessageProto(const BaseMessageProto& from);

  inline BaseMessageProto& operator=(const BaseMessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseMessageProto(BaseMessageProto&& from) noexcept
    : BaseMessageProto() {
    *this = ::std::move(from);
  }

  inline BaseMessageProto& operator=(BaseMessageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMessageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseMessageProto* internal_default_instance() {
    return reinterpret_cast<const BaseMessageProto*>(
               &_BaseMessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BaseMessageProto* other);
  friend void swap(BaseMessageProto& a, BaseMessageProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseMessageProto* New() const final {
    return CreateMaybeMessage<BaseMessageProto>(NULL);
  }

  BaseMessageProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BaseMessageProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BaseMessageProto& from);
  void MergeFrom(const BaseMessageProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseMessageProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SF.TRADE.EnMsgTypeProto msgType = 1;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  ::SF::TRADE::EnMsgTypeProto msgtype() const;
  void set_msgtype(::SF::TRADE::EnMsgTypeProto value);

  // @@protoc_insertion_point(class_scope:SF.TRADE.BaseMessageProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int msgtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmptyMessageProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SF.TRADE.EmptyMessageProto) */ {
 public:
  EmptyMessageProto();
  virtual ~EmptyMessageProto();

  EmptyMessageProto(const EmptyMessageProto& from);

  inline EmptyMessageProto& operator=(const EmptyMessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyMessageProto(EmptyMessageProto&& from) noexcept
    : EmptyMessageProto() {
    *this = ::std::move(from);
  }

  inline EmptyMessageProto& operator=(EmptyMessageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMessageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyMessageProto* internal_default_instance() {
    return reinterpret_cast<const EmptyMessageProto*>(
               &_EmptyMessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EmptyMessageProto* other);
  friend void swap(EmptyMessageProto& a, EmptyMessageProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyMessageProto* New() const final {
    return CreateMaybeMessage<EmptyMessageProto>(NULL);
  }

  EmptyMessageProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyMessageProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyMessageProto& from);
  void MergeFrom(const EmptyMessageProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMessageProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SF.TRADE.EmptyMessageProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowControlProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SF.TRADE.FlowControlProto) */ {
 public:
  FlowControlProto();
  virtual ~FlowControlProto();

  FlowControlProto(const FlowControlProto& from);

  inline FlowControlProto& operator=(const FlowControlProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowControlProto(FlowControlProto&& from) noexcept
    : FlowControlProto() {
    *this = ::std::move(from);
  }

  inline FlowControlProto& operator=(FlowControlProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowControlProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowControlProto* internal_default_instance() {
    return reinterpret_cast<const FlowControlProto*>(
               &_FlowControlProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FlowControlProto* other);
  friend void swap(FlowControlProto& a, FlowControlProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowControlProto* New() const final {
    return CreateMaybeMessage<FlowControlProto>(NULL);
  }

  FlowControlProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowControlProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowControlProto& from);
  void MergeFrom(const FlowControlProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowControlProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SF.TRADE.FlowControlProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateMessageProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SF.TRADE.UpdateMessageProto) */ {
 public:
  UpdateMessageProto();
  virtual ~UpdateMessageProto();

  UpdateMessageProto(const UpdateMessageProto& from);

  inline UpdateMessageProto& operator=(const UpdateMessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateMessageProto(UpdateMessageProto&& from) noexcept
    : UpdateMessageProto() {
    *this = ::std::move(from);
  }

  inline UpdateMessageProto& operator=(UpdateMessageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMessageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMessageProto* internal_default_instance() {
    return reinterpret_cast<const UpdateMessageProto*>(
               &_UpdateMessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateMessageProto* other);
  friend void swap(UpdateMessageProto& a, UpdateMessageProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMessageProto* New() const final {
    return CreateMaybeMessage<UpdateMessageProto>(NULL);
  }

  UpdateMessageProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMessageProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateMessageProto& from);
  void MergeFrom(const UpdateMessageProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMessageProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string component = 1;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // @@protoc_insertion_point(class_scope:SF.TRADE.UpdateMessageProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketDataProto

// string symbol = 1;
inline void MarketDataProto::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketDataProto::symbol() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.MarketDataProto.symbol)
  return symbol_.GetNoArena();
}
inline void MarketDataProto::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SF.TRADE.MarketDataProto.symbol)
}
#if LANG_CXX11
inline void MarketDataProto::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SF.TRADE.MarketDataProto.symbol)
}
#endif
inline void MarketDataProto::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SF.TRADE.MarketDataProto.symbol)
}
inline void MarketDataProto::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SF.TRADE.MarketDataProto.symbol)
}
inline ::std::string* MarketDataProto::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:SF.TRADE.MarketDataProto.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketDataProto::release_symbol() {
  // @@protoc_insertion_point(field_release:SF.TRADE.MarketDataProto.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketDataProto::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:SF.TRADE.MarketDataProto.symbol)
}

// double bid = 2;
inline void MarketDataProto::clear_bid() {
  bid_ = 0;
}
inline double MarketDataProto::bid() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.MarketDataProto.bid)
  return bid_;
}
inline void MarketDataProto::set_bid(double value) {
  
  bid_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.MarketDataProto.bid)
}

// double ask = 3;
inline void MarketDataProto::clear_ask() {
  ask_ = 0;
}
inline double MarketDataProto::ask() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.MarketDataProto.ask)
  return ask_;
}
inline void MarketDataProto::set_ask(double value) {
  
  ask_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.MarketDataProto.ask)
}

// double volume = 4;
inline void MarketDataProto::clear_volume() {
  volume_ = 0;
}
inline double MarketDataProto::volume() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.MarketDataProto.volume)
  return volume_;
}
inline void MarketDataProto::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.MarketDataProto.volume)
}

// int64 timestamp = 5;
inline void MarketDataProto::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketDataProto::timestamp() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.MarketDataProto.timestamp)
  return timestamp_;
}
inline void MarketDataProto::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.MarketDataProto.timestamp)
}

// -------------------------------------------------------------------

// BaseMessageProto

// .SF.TRADE.EnMsgTypeProto msgType = 1;
inline void BaseMessageProto::clear_msgtype() {
  msgtype_ = 0;
}
inline ::SF::TRADE::EnMsgTypeProto BaseMessageProto::msgtype() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.BaseMessageProto.msgType)
  return static_cast< ::SF::TRADE::EnMsgTypeProto >(msgtype_);
}
inline void BaseMessageProto::set_msgtype(::SF::TRADE::EnMsgTypeProto value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.BaseMessageProto.msgType)
}

// -------------------------------------------------------------------

// EmptyMessageProto

// int32 id = 1;
inline void EmptyMessageProto::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 EmptyMessageProto::id() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.EmptyMessageProto.id)
  return id_;
}
inline void EmptyMessageProto::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.EmptyMessageProto.id)
}

// -------------------------------------------------------------------

// FlowControlProto

// int32 cmd = 1;
inline void FlowControlProto::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 FlowControlProto::cmd() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.FlowControlProto.cmd)
  return cmd_;
}
inline void FlowControlProto::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.FlowControlProto.cmd)
}

// int32 count = 2;
inline void FlowControlProto::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 FlowControlProto::count() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.FlowControlProto.count)
  return count_;
}
inline void FlowControlProto::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:SF.TRADE.FlowControlProto.count)
}

// -------------------------------------------------------------------

// UpdateMessageProto

// string component = 1;
inline void UpdateMessageProto::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMessageProto::component() const {
  // @@protoc_insertion_point(field_get:SF.TRADE.UpdateMessageProto.component)
  return component_.GetNoArena();
}
inline void UpdateMessageProto::set_component(const ::std::string& value) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SF.TRADE.UpdateMessageProto.component)
}
#if LANG_CXX11
inline void UpdateMessageProto::set_component(::std::string&& value) {
  
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SF.TRADE.UpdateMessageProto.component)
}
#endif
inline void UpdateMessageProto::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SF.TRADE.UpdateMessageProto.component)
}
inline void UpdateMessageProto::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SF.TRADE.UpdateMessageProto.component)
}
inline ::std::string* UpdateMessageProto::mutable_component() {
  
  // @@protoc_insertion_point(field_mutable:SF.TRADE.UpdateMessageProto.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMessageProto::release_component() {
  // @@protoc_insertion_point(field_release:SF.TRADE.UpdateMessageProto.component)
  
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMessageProto::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:SF.TRADE.UpdateMessageProto.component)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TRADE
}  // namespace SF

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SF::TRADE::EnMsgTypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SF::TRADE::EnMsgTypeProto>() {
  return ::SF::TRADE::EnMsgTypeProto_descriptor();
}
template <> struct is_proto_enum< ::SF::TRADE::EnFlowControlProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SF::TRADE::EnFlowControlProto>() {
  return ::SF::TRADE::EnFlowControlProto_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_2eproto
