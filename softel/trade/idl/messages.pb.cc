// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace SF {
namespace TRADE {
class MarketDataProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataProto>
      _instance;
} _MarketDataProto_default_instance_;
class BaseMessageProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseMessageProto>
      _instance;
} _BaseMessageProto_default_instance_;
class EmptyMessageProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmptyMessageProto>
      _instance;
} _EmptyMessageProto_default_instance_;
class FlowControlProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowControlProto>
      _instance;
} _FlowControlProto_default_instance_;
class UpdateMessageProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMessageProto>
      _instance;
} _UpdateMessageProto_default_instance_;
}  // namespace TRADE
}  // namespace SF
namespace protobuf_messages_2eproto {
static void InitDefaultsMarketDataProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SF::TRADE::_MarketDataProto_default_instance_;
    new (ptr) ::SF::TRADE::MarketDataProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SF::TRADE::MarketDataProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataProto}, {}};

static void InitDefaultsBaseMessageProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SF::TRADE::_BaseMessageProto_default_instance_;
    new (ptr) ::SF::TRADE::BaseMessageProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SF::TRADE::BaseMessageProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BaseMessageProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBaseMessageProto}, {}};

static void InitDefaultsEmptyMessageProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SF::TRADE::_EmptyMessageProto_default_instance_;
    new (ptr) ::SF::TRADE::EmptyMessageProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SF::TRADE::EmptyMessageProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmptyMessageProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmptyMessageProto}, {}};

static void InitDefaultsFlowControlProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SF::TRADE::_FlowControlProto_default_instance_;
    new (ptr) ::SF::TRADE::FlowControlProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SF::TRADE::FlowControlProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowControlProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowControlProto}, {}};

static void InitDefaultsUpdateMessageProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SF::TRADE::_UpdateMessageProto_default_instance_;
    new (ptr) ::SF::TRADE::UpdateMessageProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SF::TRADE::UpdateMessageProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMessageProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateMessageProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BaseMessageProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmptyMessageProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowControlProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMessageProto.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, bid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, ask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::MarketDataProto, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::BaseMessageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::BaseMessageProto, msgtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::EmptyMessageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::EmptyMessageProto, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::FlowControlProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::FlowControlProto, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::FlowControlProto, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::UpdateMessageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SF::TRADE::UpdateMessageProto, component_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SF::TRADE::MarketDataProto)},
  { 10, -1, sizeof(::SF::TRADE::BaseMessageProto)},
  { 16, -1, sizeof(::SF::TRADE::EmptyMessageProto)},
  { 22, -1, sizeof(::SF::TRADE::FlowControlProto)},
  { 29, -1, sizeof(::SF::TRADE::UpdateMessageProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SF::TRADE::_MarketDataProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SF::TRADE::_BaseMessageProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SF::TRADE::_EmptyMessageProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SF::TRADE::_FlowControlProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SF::TRADE::_UpdateMessageProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016messages.proto\022\010SF.TRADE\"^\n\017MarketData"
      "Proto\022\016\n\006symbol\030\001 \001(\t\022\013\n\003bid\030\002 \001(\001\022\013\n\003as"
      "k\030\003 \001(\001\022\016\n\006volume\030\004 \001(\001\022\021\n\ttimestamp\030\005 \001"
      "(\003\"=\n\020BaseMessageProto\022)\n\007msgType\030\001 \001(\0162"
      "\030.SF.TRADE.EnMsgTypeProto\"\037\n\021EmptyMessag"
      "eProto\022\n\n\002id\030\001 \001(\005\".\n\020FlowControlProto\022\013"
      "\n\003cmd\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\'\n\022UpdateMess"
      "ageProto\022\021\n\tcomponent\030\001 \001(\t*\224\001\n\016EnMsgTyp"
      "eProto\022\r\n\tUndefined\020\000\022\032\n\026setMachineOwner"
      "Request\020\001\022\032\n\026getMachineOwnerRequest\020\002\022\034\n"
      "\030UserMessageProtoResponse\020\003\022\035\n\031EmptyMess"
      "ageProtoResponse\020\004*I\n\022EnFlowControlProto"
      "\022\t\n\005Fetch\020\000\022\020\n\014FetchRequest\020\001\022\014\n\010SetFetc"
      "h\020\002\022\010\n\004Ping\020\003B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2eproto
namespace SF {
namespace TRADE {
const ::google::protobuf::EnumDescriptor* EnMsgTypeProto_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[0];
}
bool EnMsgTypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnFlowControlProto_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[1];
}
bool EnFlowControlProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MarketDataProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataProto::kSymbolFieldNumber;
const int MarketDataProto::kBidFieldNumber;
const int MarketDataProto::kAskFieldNumber;
const int MarketDataProto::kVolumeFieldNumber;
const int MarketDataProto::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataProto::MarketDataProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_MarketDataProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SF.TRADE.MarketDataProto)
}
MarketDataProto::MarketDataProto(const MarketDataProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&bid_, &from.bid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:SF.TRADE.MarketDataProto)
}

void MarketDataProto::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(timestamp_));
}

MarketDataProto::~MarketDataProto() {
  // @@protoc_insertion_point(destructor:SF.TRADE.MarketDataProto)
  SharedDtor();
}

void MarketDataProto::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataProto::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataProto& MarketDataProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_MarketDataProto.base);
  return *internal_default_instance();
}


void MarketDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SF.TRADE.MarketDataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool MarketDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SF.TRADE.MarketDataProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SF.TRADE.MarketDataProto.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SF.TRADE.MarketDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SF.TRADE.MarketDataProto)
  return false;
#undef DO_
}

void MarketDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SF.TRADE.MarketDataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SF.TRADE.MarketDataProto.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // double bid = 2;
  if (this->bid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid(), output);
  }

  // double ask = 3;
  if (this->ask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ask(), output);
  }

  // double volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SF.TRADE.MarketDataProto)
}

::google::protobuf::uint8* MarketDataProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SF.TRADE.MarketDataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SF.TRADE.MarketDataProto.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // double bid = 2;
  if (this->bid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bid(), target);
  }

  // double ask = 3;
  if (this->ask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ask(), target);
  }

  // double volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SF.TRADE.MarketDataProto)
  return target;
}

size_t MarketDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SF.TRADE.MarketDataProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // double bid = 2;
  if (this->bid() != 0) {
    total_size += 1 + 8;
  }

  // double ask = 3;
  if (this->ask() != 0) {
    total_size += 1 + 8;
  }

  // double volume = 4;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SF.TRADE.MarketDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SF.TRADE.MarketDataProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SF.TRADE.MarketDataProto)
    MergeFrom(*source);
  }
}

void MarketDataProto::MergeFrom(const MarketDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SF.TRADE.MarketDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.bid() != 0) {
    set_bid(from.bid());
  }
  if (from.ask() != 0) {
    set_ask(from.ask());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void MarketDataProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SF.TRADE.MarketDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataProto::CopyFrom(const MarketDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SF.TRADE.MarketDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataProto::IsInitialized() const {
  return true;
}

void MarketDataProto::Swap(MarketDataProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataProto::InternalSwap(MarketDataProto* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bid_, other->bid_);
  swap(ask_, other->ask_);
  swap(volume_, other->volume_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataProto::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseMessageProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseMessageProto::kMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseMessageProto::BaseMessageProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_BaseMessageProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SF.TRADE.BaseMessageProto)
}
BaseMessageProto::BaseMessageProto(const BaseMessageProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:SF.TRADE.BaseMessageProto)
}

void BaseMessageProto::SharedCtor() {
  msgtype_ = 0;
}

BaseMessageProto::~BaseMessageProto() {
  // @@protoc_insertion_point(destructor:SF.TRADE.BaseMessageProto)
  SharedDtor();
}

void BaseMessageProto::SharedDtor() {
}

void BaseMessageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BaseMessageProto::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseMessageProto& BaseMessageProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_BaseMessageProto.base);
  return *internal_default_instance();
}


void BaseMessageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SF.TRADE.BaseMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgtype_ = 0;
  _internal_metadata_.Clear();
}

bool BaseMessageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SF.TRADE.BaseMessageProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SF.TRADE.EnMsgTypeProto msgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::SF::TRADE::EnMsgTypeProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SF.TRADE.BaseMessageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SF.TRADE.BaseMessageProto)
  return false;
#undef DO_
}

void BaseMessageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SF.TRADE.BaseMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SF.TRADE.EnMsgTypeProto msgType = 1;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SF.TRADE.BaseMessageProto)
}

::google::protobuf::uint8* BaseMessageProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SF.TRADE.BaseMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SF.TRADE.EnMsgTypeProto msgType = 1;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SF.TRADE.BaseMessageProto)
  return target;
}

size_t BaseMessageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SF.TRADE.BaseMessageProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .SF.TRADE.EnMsgTypeProto msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseMessageProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SF.TRADE.BaseMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseMessageProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseMessageProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SF.TRADE.BaseMessageProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SF.TRADE.BaseMessageProto)
    MergeFrom(*source);
  }
}

void BaseMessageProto::MergeFrom(const BaseMessageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SF.TRADE.BaseMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void BaseMessageProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SF.TRADE.BaseMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessageProto::CopyFrom(const BaseMessageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SF.TRADE.BaseMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessageProto::IsInitialized() const {
  return true;
}

void BaseMessageProto::Swap(BaseMessageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseMessageProto::InternalSwap(BaseMessageProto* other) {
  using std::swap;
  swap(msgtype_, other->msgtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BaseMessageProto::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmptyMessageProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmptyMessageProto::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyMessageProto::EmptyMessageProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EmptyMessageProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SF.TRADE.EmptyMessageProto)
}
EmptyMessageProto::EmptyMessageProto(const EmptyMessageProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SF.TRADE.EmptyMessageProto)
}

void EmptyMessageProto::SharedCtor() {
  id_ = 0;
}

EmptyMessageProto::~EmptyMessageProto() {
  // @@protoc_insertion_point(destructor:SF.TRADE.EmptyMessageProto)
  SharedDtor();
}

void EmptyMessageProto::SharedDtor() {
}

void EmptyMessageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EmptyMessageProto::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmptyMessageProto& EmptyMessageProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EmptyMessageProto.base);
  return *internal_default_instance();
}


void EmptyMessageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SF.TRADE.EmptyMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

bool EmptyMessageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SF.TRADE.EmptyMessageProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SF.TRADE.EmptyMessageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SF.TRADE.EmptyMessageProto)
  return false;
#undef DO_
}

void EmptyMessageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SF.TRADE.EmptyMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SF.TRADE.EmptyMessageProto)
}

::google::protobuf::uint8* EmptyMessageProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SF.TRADE.EmptyMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SF.TRADE.EmptyMessageProto)
  return target;
}

size_t EmptyMessageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SF.TRADE.EmptyMessageProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyMessageProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SF.TRADE.EmptyMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyMessageProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyMessageProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SF.TRADE.EmptyMessageProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SF.TRADE.EmptyMessageProto)
    MergeFrom(*source);
  }
}

void EmptyMessageProto::MergeFrom(const EmptyMessageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SF.TRADE.EmptyMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void EmptyMessageProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SF.TRADE.EmptyMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessageProto::CopyFrom(const EmptyMessageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SF.TRADE.EmptyMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessageProto::IsInitialized() const {
  return true;
}

void EmptyMessageProto::Swap(EmptyMessageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyMessageProto::InternalSwap(EmptyMessageProto* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EmptyMessageProto::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowControlProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowControlProto::kCmdFieldNumber;
const int FlowControlProto::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowControlProto::FlowControlProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_FlowControlProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SF.TRADE.FlowControlProto)
}
FlowControlProto::FlowControlProto(const FlowControlProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:SF.TRADE.FlowControlProto)
}

void FlowControlProto::SharedCtor() {
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(count_));
}

FlowControlProto::~FlowControlProto() {
  // @@protoc_insertion_point(destructor:SF.TRADE.FlowControlProto)
  SharedDtor();
}

void FlowControlProto::SharedDtor() {
}

void FlowControlProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowControlProto::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowControlProto& FlowControlProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_FlowControlProto.base);
  return *internal_default_instance();
}


void FlowControlProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SF.TRADE.FlowControlProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool FlowControlProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SF.TRADE.FlowControlProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SF.TRADE.FlowControlProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SF.TRADE.FlowControlProto)
  return false;
#undef DO_
}

void FlowControlProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SF.TRADE.FlowControlProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SF.TRADE.FlowControlProto)
}

::google::protobuf::uint8* FlowControlProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SF.TRADE.FlowControlProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd = 1;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SF.TRADE.FlowControlProto)
  return target;
}

size_t FlowControlProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SF.TRADE.FlowControlProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowControlProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SF.TRADE.FlowControlProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowControlProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowControlProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SF.TRADE.FlowControlProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SF.TRADE.FlowControlProto)
    MergeFrom(*source);
  }
}

void FlowControlProto::MergeFrom(const FlowControlProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SF.TRADE.FlowControlProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void FlowControlProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SF.TRADE.FlowControlProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowControlProto::CopyFrom(const FlowControlProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SF.TRADE.FlowControlProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowControlProto::IsInitialized() const {
  return true;
}

void FlowControlProto::Swap(FlowControlProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowControlProto::InternalSwap(FlowControlProto* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowControlProto::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateMessageProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMessageProto::kComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMessageProto::UpdateMessageProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UpdateMessageProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SF.TRADE.UpdateMessageProto)
}
UpdateMessageProto::UpdateMessageProto(const UpdateMessageProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.component().size() > 0) {
    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  // @@protoc_insertion_point(copy_constructor:SF.TRADE.UpdateMessageProto)
}

void UpdateMessageProto::SharedCtor() {
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateMessageProto::~UpdateMessageProto() {
  // @@protoc_insertion_point(destructor:SF.TRADE.UpdateMessageProto)
  SharedDtor();
}

void UpdateMessageProto::SharedDtor() {
  component_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateMessageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateMessageProto::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateMessageProto& UpdateMessageProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UpdateMessageProto.base);
  return *internal_default_instance();
}


void UpdateMessageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SF.TRADE.UpdateMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpdateMessageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SF.TRADE.UpdateMessageProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->component().data(), static_cast<int>(this->component().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SF.TRADE.UpdateMessageProto.component"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SF.TRADE.UpdateMessageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SF.TRADE.UpdateMessageProto)
  return false;
#undef DO_
}

void UpdateMessageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SF.TRADE.UpdateMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SF.TRADE.UpdateMessageProto.component");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->component(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SF.TRADE.UpdateMessageProto)
}

::google::protobuf::uint8* UpdateMessageProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SF.TRADE.UpdateMessageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SF.TRADE.UpdateMessageProto.component");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->component(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SF.TRADE.UpdateMessageProto)
  return target;
}

size_t UpdateMessageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SF.TRADE.UpdateMessageProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string component = 1;
  if (this->component().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->component());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMessageProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SF.TRADE.UpdateMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMessageProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateMessageProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SF.TRADE.UpdateMessageProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SF.TRADE.UpdateMessageProto)
    MergeFrom(*source);
  }
}

void UpdateMessageProto::MergeFrom(const UpdateMessageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SF.TRADE.UpdateMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component().size() > 0) {

    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
}

void UpdateMessageProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SF.TRADE.UpdateMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMessageProto::CopyFrom(const UpdateMessageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SF.TRADE.UpdateMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageProto::IsInitialized() const {
  return true;
}

void UpdateMessageProto::Swap(UpdateMessageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMessageProto::InternalSwap(UpdateMessageProto* other) {
  using std::swap;
  component_.Swap(&other->component_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateMessageProto::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TRADE
}  // namespace SF
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SF::TRADE::MarketDataProto* Arena::CreateMaybeMessage< ::SF::TRADE::MarketDataProto >(Arena* arena) {
  return Arena::CreateInternal< ::SF::TRADE::MarketDataProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SF::TRADE::BaseMessageProto* Arena::CreateMaybeMessage< ::SF::TRADE::BaseMessageProto >(Arena* arena) {
  return Arena::CreateInternal< ::SF::TRADE::BaseMessageProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SF::TRADE::EmptyMessageProto* Arena::CreateMaybeMessage< ::SF::TRADE::EmptyMessageProto >(Arena* arena) {
  return Arena::CreateInternal< ::SF::TRADE::EmptyMessageProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SF::TRADE::FlowControlProto* Arena::CreateMaybeMessage< ::SF::TRADE::FlowControlProto >(Arena* arena) {
  return Arena::CreateInternal< ::SF::TRADE::FlowControlProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SF::TRADE::UpdateMessageProto* Arena::CreateMaybeMessage< ::SF::TRADE::UpdateMessageProto >(Arena* arena) {
  return Arena::CreateInternal< ::SF::TRADE::UpdateMessageProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
