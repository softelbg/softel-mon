/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdminMachine_H
#define AdminMachine_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "trade_types.h"

namespace SF { namespace TRADE { namespace THRIFT {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AdminMachineIf {
 public:
  virtual ~AdminMachineIf() {}
  virtual void run(const TMSpec& tm) = 0;
  virtual void kill(const TMSpec& tm) = 0;
  virtual void killall() = 0;
};

class AdminMachineIfFactory {
 public:
  typedef AdminMachineIf Handler;

  virtual ~AdminMachineIfFactory() {}

  virtual AdminMachineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdminMachineIf* /* handler */) = 0;
};

class AdminMachineIfSingletonFactory : virtual public AdminMachineIfFactory {
 public:
  AdminMachineIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<AdminMachineIf>& iface) : iface_(iface) {}
  virtual ~AdminMachineIfSingletonFactory() {}

  virtual AdminMachineIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdminMachineIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<AdminMachineIf> iface_;
};

class AdminMachineNull : virtual public AdminMachineIf {
 public:
  virtual ~AdminMachineNull() {}
  void run(const TMSpec& /* tm */) {
    return;
  }
  void kill(const TMSpec& /* tm */) {
    return;
  }
  void killall() {
    return;
  }
};

typedef struct _AdminMachine_run_args__isset {
  _AdminMachine_run_args__isset() : tm(false) {}
  bool tm :1;
} _AdminMachine_run_args__isset;

class AdminMachine_run_args {
 public:

  AdminMachine_run_args(const AdminMachine_run_args&);
  AdminMachine_run_args& operator=(const AdminMachine_run_args&);
  AdminMachine_run_args() {
  }

  virtual ~AdminMachine_run_args() throw();
  TMSpec tm;

  _AdminMachine_run_args__isset __isset;

  void __set_tm(const TMSpec& val);

  bool operator == (const AdminMachine_run_args & rhs) const
  {
    if (!(tm == rhs.tm))
      return false;
    return true;
  }
  bool operator != (const AdminMachine_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminMachine_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminMachine_run_pargs {
 public:


  virtual ~AdminMachine_run_pargs() throw();
  const TMSpec* tm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminMachine_kill_args__isset {
  _AdminMachine_kill_args__isset() : tm(false) {}
  bool tm :1;
} _AdminMachine_kill_args__isset;

class AdminMachine_kill_args {
 public:

  AdminMachine_kill_args(const AdminMachine_kill_args&);
  AdminMachine_kill_args& operator=(const AdminMachine_kill_args&);
  AdminMachine_kill_args() {
  }

  virtual ~AdminMachine_kill_args() throw();
  TMSpec tm;

  _AdminMachine_kill_args__isset __isset;

  void __set_tm(const TMSpec& val);

  bool operator == (const AdminMachine_kill_args & rhs) const
  {
    if (!(tm == rhs.tm))
      return false;
    return true;
  }
  bool operator != (const AdminMachine_kill_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminMachine_kill_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminMachine_kill_pargs {
 public:


  virtual ~AdminMachine_kill_pargs() throw();
  const TMSpec* tm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminMachine_killall_args {
 public:

  AdminMachine_killall_args(const AdminMachine_killall_args&);
  AdminMachine_killall_args& operator=(const AdminMachine_killall_args&);
  AdminMachine_killall_args() {
  }

  virtual ~AdminMachine_killall_args() throw();

  bool operator == (const AdminMachine_killall_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdminMachine_killall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminMachine_killall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminMachine_killall_pargs {
 public:


  virtual ~AdminMachine_killall_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class AdminMachineClient : virtual public AdminMachineIf {
 public:
  AdminMachineClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdminMachineClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void run(const TMSpec& tm);
  void send_run(const TMSpec& tm);
  void kill(const TMSpec& tm);
  void send_kill(const TMSpec& tm);
  void killall();
  void send_killall();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdminMachineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<AdminMachineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdminMachineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kill(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_killall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdminMachineProcessor(::apache::thrift::stdcxx::shared_ptr<AdminMachineIf> iface) :
    iface_(iface) {
    processMap_["run"] = &AdminMachineProcessor::process_run;
    processMap_["kill"] = &AdminMachineProcessor::process_kill;
    processMap_["killall"] = &AdminMachineProcessor::process_killall;
  }

  virtual ~AdminMachineProcessor() {}
};

class AdminMachineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdminMachineProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< AdminMachineIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< AdminMachineIfFactory > handlerFactory_;
};

class AdminMachineMultiface : virtual public AdminMachineIf {
 public:
  AdminMachineMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<AdminMachineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdminMachineMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<AdminMachineIf> > ifaces_;
  AdminMachineMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<AdminMachineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void run(const TMSpec& tm) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run(tm);
    }
    ifaces_[i]->run(tm);
  }

  void kill(const TMSpec& tm) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kill(tm);
    }
    ifaces_[i]->kill(tm);
  }

  void killall() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->killall();
    }
    ifaces_[i]->killall();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AdminMachineConcurrentClient : virtual public AdminMachineIf {
 public:
  AdminMachineConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdminMachineConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void run(const TMSpec& tm);
  void send_run(const TMSpec& tm);
  void kill(const TMSpec& tm);
  void send_kill(const TMSpec& tm);
  void killall();
  void send_killall();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
