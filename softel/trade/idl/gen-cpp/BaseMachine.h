/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BaseMachine_H
#define BaseMachine_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "trade_types.h"

namespace SF { namespace TRADE { namespace THRIFT {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BaseMachineIf {
 public:
  virtual ~BaseMachineIf() {}
  virtual void getTM(TradeMachine& _return) = 0;
  virtual void setUsers(const std::vector<User> & users) = 0;
  virtual void addUser(const User& user) = 0;
  virtual void getUsers(std::vector<User> & _return) = 0;
  virtual void getUser(User& _return, const int32_t idx) = 0;
  virtual void setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst) = 0;
  virtual void setSymbolsSrc(const std::vector<Symbol> & src) = 0;
  virtual void setSymbolsDst(const std::vector<Symbol> & dst) = 0;
  virtual void getSymbolsSrc(std::vector<Symbol> & _return) = 0;
  virtual void getSymbolsDst(std::vector<Symbol> & _return) = 0;
  virtual void getSymbolSrc(Symbol& _return, const int32_t idx) = 0;
  virtual void getSymbolDst(Symbol& _return, const int32_t idx) = 0;
  virtual void clearBook() = 0;
  virtual int64_t postOrder(const Order& o) = 0;
  virtual int64_t postOrderWithMatch(const Order& o, const std::string& match) = 0;
  virtual int64_t matchOrders(const ID id1, const ID id2) = 0;
  virtual void getOrderBook(OrderBook& _return) = 0;
  virtual void getMarketData(std::map<std::string, TMarketDataPoint> & _return) = 0;
  virtual void waitForUpdates(std::vector<std::string> & _return) = 0;
};

class BaseMachineIfFactory {
 public:
  typedef BaseMachineIf Handler;

  virtual ~BaseMachineIfFactory() {}

  virtual BaseMachineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BaseMachineIf* /* handler */) = 0;
};

class BaseMachineIfSingletonFactory : virtual public BaseMachineIfFactory {
 public:
  BaseMachineIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BaseMachineIf>& iface) : iface_(iface) {}
  virtual ~BaseMachineIfSingletonFactory() {}

  virtual BaseMachineIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BaseMachineIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BaseMachineIf> iface_;
};

class BaseMachineNull : virtual public BaseMachineIf {
 public:
  virtual ~BaseMachineNull() {}
  void getTM(TradeMachine& /* _return */) {
    return;
  }
  void setUsers(const std::vector<User> & /* users */) {
    return;
  }
  void addUser(const User& /* user */) {
    return;
  }
  void getUsers(std::vector<User> & /* _return */) {
    return;
  }
  void getUser(User& /* _return */, const int32_t /* idx */) {
    return;
  }
  void setSymbols(const std::vector<Symbol> & /* src */, const std::vector<Symbol> & /* dst */) {
    return;
  }
  void setSymbolsSrc(const std::vector<Symbol> & /* src */) {
    return;
  }
  void setSymbolsDst(const std::vector<Symbol> & /* dst */) {
    return;
  }
  void getSymbolsSrc(std::vector<Symbol> & /* _return */) {
    return;
  }
  void getSymbolsDst(std::vector<Symbol> & /* _return */) {
    return;
  }
  void getSymbolSrc(Symbol& /* _return */, const int32_t /* idx */) {
    return;
  }
  void getSymbolDst(Symbol& /* _return */, const int32_t /* idx */) {
    return;
  }
  void clearBook() {
    return;
  }
  int64_t postOrder(const Order& /* o */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t postOrderWithMatch(const Order& /* o */, const std::string& /* match */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t matchOrders(const ID /* id1 */, const ID /* id2 */) {
    int64_t _return = 0;
    return _return;
  }
  void getOrderBook(OrderBook& /* _return */) {
    return;
  }
  void getMarketData(std::map<std::string, TMarketDataPoint> & /* _return */) {
    return;
  }
  void waitForUpdates(std::vector<std::string> & /* _return */) {
    return;
  }
};


class BaseMachine_getTM_args {
 public:

  BaseMachine_getTM_args(const BaseMachine_getTM_args&);
  BaseMachine_getTM_args& operator=(const BaseMachine_getTM_args&);
  BaseMachine_getTM_args() {
  }

  virtual ~BaseMachine_getTM_args() throw();

  bool operator == (const BaseMachine_getTM_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getTM_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getTM_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getTM_pargs {
 public:


  virtual ~BaseMachine_getTM_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getTM_result__isset {
  _BaseMachine_getTM_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getTM_result__isset;

class BaseMachine_getTM_result {
 public:

  BaseMachine_getTM_result(const BaseMachine_getTM_result&);
  BaseMachine_getTM_result& operator=(const BaseMachine_getTM_result&);
  BaseMachine_getTM_result() {
  }

  virtual ~BaseMachine_getTM_result() throw();
  TradeMachine success;

  _BaseMachine_getTM_result__isset __isset;

  void __set_success(const TradeMachine& val);

  bool operator == (const BaseMachine_getTM_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getTM_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getTM_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getTM_presult__isset {
  _BaseMachine_getTM_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getTM_presult__isset;

class BaseMachine_getTM_presult {
 public:


  virtual ~BaseMachine_getTM_presult() throw();
  TradeMachine* success;

  _BaseMachine_getTM_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_setUsers_args__isset {
  _BaseMachine_setUsers_args__isset() : users(false) {}
  bool users :1;
} _BaseMachine_setUsers_args__isset;

class BaseMachine_setUsers_args {
 public:

  BaseMachine_setUsers_args(const BaseMachine_setUsers_args&);
  BaseMachine_setUsers_args& operator=(const BaseMachine_setUsers_args&);
  BaseMachine_setUsers_args() {
  }

  virtual ~BaseMachine_setUsers_args() throw();
  std::vector<User>  users;

  _BaseMachine_setUsers_args__isset __isset;

  void __set_users(const std::vector<User> & val);

  bool operator == (const BaseMachine_setUsers_args & rhs) const
  {
    if (!(users == rhs.users))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_setUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_setUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_setUsers_pargs {
 public:


  virtual ~BaseMachine_setUsers_pargs() throw();
  const std::vector<User> * users;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_addUser_args__isset {
  _BaseMachine_addUser_args__isset() : user(false) {}
  bool user :1;
} _BaseMachine_addUser_args__isset;

class BaseMachine_addUser_args {
 public:

  BaseMachine_addUser_args(const BaseMachine_addUser_args&);
  BaseMachine_addUser_args& operator=(const BaseMachine_addUser_args&);
  BaseMachine_addUser_args() {
  }

  virtual ~BaseMachine_addUser_args() throw();
  User user;

  _BaseMachine_addUser_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const BaseMachine_addUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_addUser_pargs {
 public:


  virtual ~BaseMachine_addUser_pargs() throw();
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getUsers_args {
 public:

  BaseMachine_getUsers_args(const BaseMachine_getUsers_args&);
  BaseMachine_getUsers_args& operator=(const BaseMachine_getUsers_args&);
  BaseMachine_getUsers_args() {
  }

  virtual ~BaseMachine_getUsers_args() throw();

  bool operator == (const BaseMachine_getUsers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getUsers_pargs {
 public:


  virtual ~BaseMachine_getUsers_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getUsers_result__isset {
  _BaseMachine_getUsers_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getUsers_result__isset;

class BaseMachine_getUsers_result {
 public:

  BaseMachine_getUsers_result(const BaseMachine_getUsers_result&);
  BaseMachine_getUsers_result& operator=(const BaseMachine_getUsers_result&);
  BaseMachine_getUsers_result() {
  }

  virtual ~BaseMachine_getUsers_result() throw();
  std::vector<User>  success;

  _BaseMachine_getUsers_result__isset __isset;

  void __set_success(const std::vector<User> & val);

  bool operator == (const BaseMachine_getUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getUsers_presult__isset {
  _BaseMachine_getUsers_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getUsers_presult__isset;

class BaseMachine_getUsers_presult {
 public:


  virtual ~BaseMachine_getUsers_presult() throw();
  std::vector<User> * success;

  _BaseMachine_getUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_getUser_args__isset {
  _BaseMachine_getUser_args__isset() : idx(false) {}
  bool idx :1;
} _BaseMachine_getUser_args__isset;

class BaseMachine_getUser_args {
 public:

  BaseMachine_getUser_args(const BaseMachine_getUser_args&);
  BaseMachine_getUser_args& operator=(const BaseMachine_getUser_args&);
  BaseMachine_getUser_args() : idx(0) {
  }

  virtual ~BaseMachine_getUser_args() throw();
  int32_t idx;

  _BaseMachine_getUser_args__isset __isset;

  void __set_idx(const int32_t val);

  bool operator == (const BaseMachine_getUser_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getUser_pargs {
 public:


  virtual ~BaseMachine_getUser_pargs() throw();
  const int32_t* idx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getUser_result__isset {
  _BaseMachine_getUser_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getUser_result__isset;

class BaseMachine_getUser_result {
 public:

  BaseMachine_getUser_result(const BaseMachine_getUser_result&);
  BaseMachine_getUser_result& operator=(const BaseMachine_getUser_result&);
  BaseMachine_getUser_result() {
  }

  virtual ~BaseMachine_getUser_result() throw();
  User success;

  _BaseMachine_getUser_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const BaseMachine_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getUser_presult__isset {
  _BaseMachine_getUser_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getUser_presult__isset;

class BaseMachine_getUser_presult {
 public:


  virtual ~BaseMachine_getUser_presult() throw();
  User* success;

  _BaseMachine_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_setSymbols_args__isset {
  _BaseMachine_setSymbols_args__isset() : src(false), dst(false) {}
  bool src :1;
  bool dst :1;
} _BaseMachine_setSymbols_args__isset;

class BaseMachine_setSymbols_args {
 public:

  BaseMachine_setSymbols_args(const BaseMachine_setSymbols_args&);
  BaseMachine_setSymbols_args& operator=(const BaseMachine_setSymbols_args&);
  BaseMachine_setSymbols_args() {
  }

  virtual ~BaseMachine_setSymbols_args() throw();
  std::vector<Symbol>  src;
  std::vector<Symbol>  dst;

  _BaseMachine_setSymbols_args__isset __isset;

  void __set_src(const std::vector<Symbol> & val);

  void __set_dst(const std::vector<Symbol> & val);

  bool operator == (const BaseMachine_setSymbols_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(dst == rhs.dst))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_setSymbols_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_setSymbols_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_setSymbols_pargs {
 public:


  virtual ~BaseMachine_setSymbols_pargs() throw();
  const std::vector<Symbol> * src;
  const std::vector<Symbol> * dst;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_setSymbolsSrc_args__isset {
  _BaseMachine_setSymbolsSrc_args__isset() : src(false) {}
  bool src :1;
} _BaseMachine_setSymbolsSrc_args__isset;

class BaseMachine_setSymbolsSrc_args {
 public:

  BaseMachine_setSymbolsSrc_args(const BaseMachine_setSymbolsSrc_args&);
  BaseMachine_setSymbolsSrc_args& operator=(const BaseMachine_setSymbolsSrc_args&);
  BaseMachine_setSymbolsSrc_args() {
  }

  virtual ~BaseMachine_setSymbolsSrc_args() throw();
  std::vector<Symbol>  src;

  _BaseMachine_setSymbolsSrc_args__isset __isset;

  void __set_src(const std::vector<Symbol> & val);

  bool operator == (const BaseMachine_setSymbolsSrc_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_setSymbolsSrc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_setSymbolsSrc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_setSymbolsSrc_pargs {
 public:


  virtual ~BaseMachine_setSymbolsSrc_pargs() throw();
  const std::vector<Symbol> * src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_setSymbolsDst_args__isset {
  _BaseMachine_setSymbolsDst_args__isset() : dst(false) {}
  bool dst :1;
} _BaseMachine_setSymbolsDst_args__isset;

class BaseMachine_setSymbolsDst_args {
 public:

  BaseMachine_setSymbolsDst_args(const BaseMachine_setSymbolsDst_args&);
  BaseMachine_setSymbolsDst_args& operator=(const BaseMachine_setSymbolsDst_args&);
  BaseMachine_setSymbolsDst_args() {
  }

  virtual ~BaseMachine_setSymbolsDst_args() throw();
  std::vector<Symbol>  dst;

  _BaseMachine_setSymbolsDst_args__isset __isset;

  void __set_dst(const std::vector<Symbol> & val);

  bool operator == (const BaseMachine_setSymbolsDst_args & rhs) const
  {
    if (!(dst == rhs.dst))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_setSymbolsDst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_setSymbolsDst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_setSymbolsDst_pargs {
 public:


  virtual ~BaseMachine_setSymbolsDst_pargs() throw();
  const std::vector<Symbol> * dst;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getSymbolsSrc_args {
 public:

  BaseMachine_getSymbolsSrc_args(const BaseMachine_getSymbolsSrc_args&);
  BaseMachine_getSymbolsSrc_args& operator=(const BaseMachine_getSymbolsSrc_args&);
  BaseMachine_getSymbolsSrc_args() {
  }

  virtual ~BaseMachine_getSymbolsSrc_args() throw();

  bool operator == (const BaseMachine_getSymbolsSrc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getSymbolsSrc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolsSrc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getSymbolsSrc_pargs {
 public:


  virtual ~BaseMachine_getSymbolsSrc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolsSrc_result__isset {
  _BaseMachine_getSymbolsSrc_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolsSrc_result__isset;

class BaseMachine_getSymbolsSrc_result {
 public:

  BaseMachine_getSymbolsSrc_result(const BaseMachine_getSymbolsSrc_result&);
  BaseMachine_getSymbolsSrc_result& operator=(const BaseMachine_getSymbolsSrc_result&);
  BaseMachine_getSymbolsSrc_result() {
  }

  virtual ~BaseMachine_getSymbolsSrc_result() throw();
  std::vector<Symbol>  success;

  _BaseMachine_getSymbolsSrc_result__isset __isset;

  void __set_success(const std::vector<Symbol> & val);

  bool operator == (const BaseMachine_getSymbolsSrc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolsSrc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolsSrc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolsSrc_presult__isset {
  _BaseMachine_getSymbolsSrc_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolsSrc_presult__isset;

class BaseMachine_getSymbolsSrc_presult {
 public:


  virtual ~BaseMachine_getSymbolsSrc_presult() throw();
  std::vector<Symbol> * success;

  _BaseMachine_getSymbolsSrc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseMachine_getSymbolsDst_args {
 public:

  BaseMachine_getSymbolsDst_args(const BaseMachine_getSymbolsDst_args&);
  BaseMachine_getSymbolsDst_args& operator=(const BaseMachine_getSymbolsDst_args&);
  BaseMachine_getSymbolsDst_args() {
  }

  virtual ~BaseMachine_getSymbolsDst_args() throw();

  bool operator == (const BaseMachine_getSymbolsDst_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getSymbolsDst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolsDst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getSymbolsDst_pargs {
 public:


  virtual ~BaseMachine_getSymbolsDst_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolsDst_result__isset {
  _BaseMachine_getSymbolsDst_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolsDst_result__isset;

class BaseMachine_getSymbolsDst_result {
 public:

  BaseMachine_getSymbolsDst_result(const BaseMachine_getSymbolsDst_result&);
  BaseMachine_getSymbolsDst_result& operator=(const BaseMachine_getSymbolsDst_result&);
  BaseMachine_getSymbolsDst_result() {
  }

  virtual ~BaseMachine_getSymbolsDst_result() throw();
  std::vector<Symbol>  success;

  _BaseMachine_getSymbolsDst_result__isset __isset;

  void __set_success(const std::vector<Symbol> & val);

  bool operator == (const BaseMachine_getSymbolsDst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolsDst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolsDst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolsDst_presult__isset {
  _BaseMachine_getSymbolsDst_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolsDst_presult__isset;

class BaseMachine_getSymbolsDst_presult {
 public:


  virtual ~BaseMachine_getSymbolsDst_presult() throw();
  std::vector<Symbol> * success;

  _BaseMachine_getSymbolsDst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_getSymbolSrc_args__isset {
  _BaseMachine_getSymbolSrc_args__isset() : idx(false) {}
  bool idx :1;
} _BaseMachine_getSymbolSrc_args__isset;

class BaseMachine_getSymbolSrc_args {
 public:

  BaseMachine_getSymbolSrc_args(const BaseMachine_getSymbolSrc_args&);
  BaseMachine_getSymbolSrc_args& operator=(const BaseMachine_getSymbolSrc_args&);
  BaseMachine_getSymbolSrc_args() : idx(0) {
  }

  virtual ~BaseMachine_getSymbolSrc_args() throw();
  int32_t idx;

  _BaseMachine_getSymbolSrc_args__isset __isset;

  void __set_idx(const int32_t val);

  bool operator == (const BaseMachine_getSymbolSrc_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolSrc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolSrc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getSymbolSrc_pargs {
 public:


  virtual ~BaseMachine_getSymbolSrc_pargs() throw();
  const int32_t* idx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolSrc_result__isset {
  _BaseMachine_getSymbolSrc_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolSrc_result__isset;

class BaseMachine_getSymbolSrc_result {
 public:

  BaseMachine_getSymbolSrc_result(const BaseMachine_getSymbolSrc_result&);
  BaseMachine_getSymbolSrc_result& operator=(const BaseMachine_getSymbolSrc_result&);
  BaseMachine_getSymbolSrc_result() {
  }

  virtual ~BaseMachine_getSymbolSrc_result() throw();
  Symbol success;

  _BaseMachine_getSymbolSrc_result__isset __isset;

  void __set_success(const Symbol& val);

  bool operator == (const BaseMachine_getSymbolSrc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolSrc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolSrc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolSrc_presult__isset {
  _BaseMachine_getSymbolSrc_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolSrc_presult__isset;

class BaseMachine_getSymbolSrc_presult {
 public:


  virtual ~BaseMachine_getSymbolSrc_presult() throw();
  Symbol* success;

  _BaseMachine_getSymbolSrc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_getSymbolDst_args__isset {
  _BaseMachine_getSymbolDst_args__isset() : idx(false) {}
  bool idx :1;
} _BaseMachine_getSymbolDst_args__isset;

class BaseMachine_getSymbolDst_args {
 public:

  BaseMachine_getSymbolDst_args(const BaseMachine_getSymbolDst_args&);
  BaseMachine_getSymbolDst_args& operator=(const BaseMachine_getSymbolDst_args&);
  BaseMachine_getSymbolDst_args() : idx(0) {
  }

  virtual ~BaseMachine_getSymbolDst_args() throw();
  int32_t idx;

  _BaseMachine_getSymbolDst_args__isset __isset;

  void __set_idx(const int32_t val);

  bool operator == (const BaseMachine_getSymbolDst_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolDst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolDst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getSymbolDst_pargs {
 public:


  virtual ~BaseMachine_getSymbolDst_pargs() throw();
  const int32_t* idx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolDst_result__isset {
  _BaseMachine_getSymbolDst_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolDst_result__isset;

class BaseMachine_getSymbolDst_result {
 public:

  BaseMachine_getSymbolDst_result(const BaseMachine_getSymbolDst_result&);
  BaseMachine_getSymbolDst_result& operator=(const BaseMachine_getSymbolDst_result&);
  BaseMachine_getSymbolDst_result() {
  }

  virtual ~BaseMachine_getSymbolDst_result() throw();
  Symbol success;

  _BaseMachine_getSymbolDst_result__isset __isset;

  void __set_success(const Symbol& val);

  bool operator == (const BaseMachine_getSymbolDst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getSymbolDst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getSymbolDst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getSymbolDst_presult__isset {
  _BaseMachine_getSymbolDst_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getSymbolDst_presult__isset;

class BaseMachine_getSymbolDst_presult {
 public:


  virtual ~BaseMachine_getSymbolDst_presult() throw();
  Symbol* success;

  _BaseMachine_getSymbolDst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseMachine_clearBook_args {
 public:

  BaseMachine_clearBook_args(const BaseMachine_clearBook_args&);
  BaseMachine_clearBook_args& operator=(const BaseMachine_clearBook_args&);
  BaseMachine_clearBook_args() {
  }

  virtual ~BaseMachine_clearBook_args() throw();

  bool operator == (const BaseMachine_clearBook_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_clearBook_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_clearBook_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_clearBook_pargs {
 public:


  virtual ~BaseMachine_clearBook_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_postOrder_args__isset {
  _BaseMachine_postOrder_args__isset() : o(false) {}
  bool o :1;
} _BaseMachine_postOrder_args__isset;

class BaseMachine_postOrder_args {
 public:

  BaseMachine_postOrder_args(const BaseMachine_postOrder_args&);
  BaseMachine_postOrder_args& operator=(const BaseMachine_postOrder_args&);
  BaseMachine_postOrder_args() {
  }

  virtual ~BaseMachine_postOrder_args() throw();
  Order o;

  _BaseMachine_postOrder_args__isset __isset;

  void __set_o(const Order& val);

  bool operator == (const BaseMachine_postOrder_args & rhs) const
  {
    if (!(o == rhs.o))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_postOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_postOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_postOrder_pargs {
 public:


  virtual ~BaseMachine_postOrder_pargs() throw();
  const Order* o;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_postOrder_result__isset {
  _BaseMachine_postOrder_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_postOrder_result__isset;

class BaseMachine_postOrder_result {
 public:

  BaseMachine_postOrder_result(const BaseMachine_postOrder_result&);
  BaseMachine_postOrder_result& operator=(const BaseMachine_postOrder_result&);
  BaseMachine_postOrder_result() : success(0) {
  }

  virtual ~BaseMachine_postOrder_result() throw();
  int64_t success;

  _BaseMachine_postOrder_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BaseMachine_postOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_postOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_postOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_postOrder_presult__isset {
  _BaseMachine_postOrder_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_postOrder_presult__isset;

class BaseMachine_postOrder_presult {
 public:


  virtual ~BaseMachine_postOrder_presult() throw();
  int64_t* success;

  _BaseMachine_postOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_postOrderWithMatch_args__isset {
  _BaseMachine_postOrderWithMatch_args__isset() : o(false), match(false) {}
  bool o :1;
  bool match :1;
} _BaseMachine_postOrderWithMatch_args__isset;

class BaseMachine_postOrderWithMatch_args {
 public:

  BaseMachine_postOrderWithMatch_args(const BaseMachine_postOrderWithMatch_args&);
  BaseMachine_postOrderWithMatch_args& operator=(const BaseMachine_postOrderWithMatch_args&);
  BaseMachine_postOrderWithMatch_args() : match() {
  }

  virtual ~BaseMachine_postOrderWithMatch_args() throw();
  Order o;
  std::string match;

  _BaseMachine_postOrderWithMatch_args__isset __isset;

  void __set_o(const Order& val);

  void __set_match(const std::string& val);

  bool operator == (const BaseMachine_postOrderWithMatch_args & rhs) const
  {
    if (!(o == rhs.o))
      return false;
    if (!(match == rhs.match))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_postOrderWithMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_postOrderWithMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_postOrderWithMatch_pargs {
 public:


  virtual ~BaseMachine_postOrderWithMatch_pargs() throw();
  const Order* o;
  const std::string* match;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_postOrderWithMatch_result__isset {
  _BaseMachine_postOrderWithMatch_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_postOrderWithMatch_result__isset;

class BaseMachine_postOrderWithMatch_result {
 public:

  BaseMachine_postOrderWithMatch_result(const BaseMachine_postOrderWithMatch_result&);
  BaseMachine_postOrderWithMatch_result& operator=(const BaseMachine_postOrderWithMatch_result&);
  BaseMachine_postOrderWithMatch_result() : success(0) {
  }

  virtual ~BaseMachine_postOrderWithMatch_result() throw();
  int64_t success;

  _BaseMachine_postOrderWithMatch_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BaseMachine_postOrderWithMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_postOrderWithMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_postOrderWithMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_postOrderWithMatch_presult__isset {
  _BaseMachine_postOrderWithMatch_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_postOrderWithMatch_presult__isset;

class BaseMachine_postOrderWithMatch_presult {
 public:


  virtual ~BaseMachine_postOrderWithMatch_presult() throw();
  int64_t* success;

  _BaseMachine_postOrderWithMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseMachine_matchOrders_args__isset {
  _BaseMachine_matchOrders_args__isset() : id1(false), id2(false) {}
  bool id1 :1;
  bool id2 :1;
} _BaseMachine_matchOrders_args__isset;

class BaseMachine_matchOrders_args {
 public:

  BaseMachine_matchOrders_args(const BaseMachine_matchOrders_args&);
  BaseMachine_matchOrders_args& operator=(const BaseMachine_matchOrders_args&);
  BaseMachine_matchOrders_args() : id1(0), id2(0) {
  }

  virtual ~BaseMachine_matchOrders_args() throw();
  ID id1;
  ID id2;

  _BaseMachine_matchOrders_args__isset __isset;

  void __set_id1(const ID val);

  void __set_id2(const ID val);

  bool operator == (const BaseMachine_matchOrders_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_matchOrders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_matchOrders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_matchOrders_pargs {
 public:


  virtual ~BaseMachine_matchOrders_pargs() throw();
  const ID* id1;
  const ID* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_matchOrders_result__isset {
  _BaseMachine_matchOrders_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_matchOrders_result__isset;

class BaseMachine_matchOrders_result {
 public:

  BaseMachine_matchOrders_result(const BaseMachine_matchOrders_result&);
  BaseMachine_matchOrders_result& operator=(const BaseMachine_matchOrders_result&);
  BaseMachine_matchOrders_result() : success(0) {
  }

  virtual ~BaseMachine_matchOrders_result() throw();
  int64_t success;

  _BaseMachine_matchOrders_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BaseMachine_matchOrders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_matchOrders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_matchOrders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_matchOrders_presult__isset {
  _BaseMachine_matchOrders_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_matchOrders_presult__isset;

class BaseMachine_matchOrders_presult {
 public:


  virtual ~BaseMachine_matchOrders_presult() throw();
  int64_t* success;

  _BaseMachine_matchOrders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseMachine_getOrderBook_args {
 public:

  BaseMachine_getOrderBook_args(const BaseMachine_getOrderBook_args&);
  BaseMachine_getOrderBook_args& operator=(const BaseMachine_getOrderBook_args&);
  BaseMachine_getOrderBook_args() {
  }

  virtual ~BaseMachine_getOrderBook_args() throw();

  bool operator == (const BaseMachine_getOrderBook_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getOrderBook_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getOrderBook_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getOrderBook_pargs {
 public:


  virtual ~BaseMachine_getOrderBook_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getOrderBook_result__isset {
  _BaseMachine_getOrderBook_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getOrderBook_result__isset;

class BaseMachine_getOrderBook_result {
 public:

  BaseMachine_getOrderBook_result(const BaseMachine_getOrderBook_result&);
  BaseMachine_getOrderBook_result& operator=(const BaseMachine_getOrderBook_result&);
  BaseMachine_getOrderBook_result() {
  }

  virtual ~BaseMachine_getOrderBook_result() throw();
  OrderBook success;

  _BaseMachine_getOrderBook_result__isset __isset;

  void __set_success(const OrderBook& val);

  bool operator == (const BaseMachine_getOrderBook_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getOrderBook_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getOrderBook_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getOrderBook_presult__isset {
  _BaseMachine_getOrderBook_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getOrderBook_presult__isset;

class BaseMachine_getOrderBook_presult {
 public:


  virtual ~BaseMachine_getOrderBook_presult() throw();
  OrderBook* success;

  _BaseMachine_getOrderBook_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseMachine_getMarketData_args {
 public:

  BaseMachine_getMarketData_args(const BaseMachine_getMarketData_args&);
  BaseMachine_getMarketData_args& operator=(const BaseMachine_getMarketData_args&);
  BaseMachine_getMarketData_args() {
  }

  virtual ~BaseMachine_getMarketData_args() throw();

  bool operator == (const BaseMachine_getMarketData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_getMarketData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getMarketData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_getMarketData_pargs {
 public:


  virtual ~BaseMachine_getMarketData_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getMarketData_result__isset {
  _BaseMachine_getMarketData_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getMarketData_result__isset;

class BaseMachine_getMarketData_result {
 public:

  BaseMachine_getMarketData_result(const BaseMachine_getMarketData_result&);
  BaseMachine_getMarketData_result& operator=(const BaseMachine_getMarketData_result&);
  BaseMachine_getMarketData_result() {
  }

  virtual ~BaseMachine_getMarketData_result() throw();
  std::map<std::string, TMarketDataPoint>  success;

  _BaseMachine_getMarketData_result__isset __isset;

  void __set_success(const std::map<std::string, TMarketDataPoint> & val);

  bool operator == (const BaseMachine_getMarketData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_getMarketData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_getMarketData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_getMarketData_presult__isset {
  _BaseMachine_getMarketData_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_getMarketData_presult__isset;

class BaseMachine_getMarketData_presult {
 public:


  virtual ~BaseMachine_getMarketData_presult() throw();
  std::map<std::string, TMarketDataPoint> * success;

  _BaseMachine_getMarketData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseMachine_waitForUpdates_args {
 public:

  BaseMachine_waitForUpdates_args(const BaseMachine_waitForUpdates_args&);
  BaseMachine_waitForUpdates_args& operator=(const BaseMachine_waitForUpdates_args&);
  BaseMachine_waitForUpdates_args() {
  }

  virtual ~BaseMachine_waitForUpdates_args() throw();

  bool operator == (const BaseMachine_waitForUpdates_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseMachine_waitForUpdates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_waitForUpdates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseMachine_waitForUpdates_pargs {
 public:


  virtual ~BaseMachine_waitForUpdates_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_waitForUpdates_result__isset {
  _BaseMachine_waitForUpdates_result__isset() : success(false) {}
  bool success :1;
} _BaseMachine_waitForUpdates_result__isset;

class BaseMachine_waitForUpdates_result {
 public:

  BaseMachine_waitForUpdates_result(const BaseMachine_waitForUpdates_result&);
  BaseMachine_waitForUpdates_result& operator=(const BaseMachine_waitForUpdates_result&);
  BaseMachine_waitForUpdates_result() {
  }

  virtual ~BaseMachine_waitForUpdates_result() throw();
  std::vector<std::string>  success;

  _BaseMachine_waitForUpdates_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const BaseMachine_waitForUpdates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseMachine_waitForUpdates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseMachine_waitForUpdates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseMachine_waitForUpdates_presult__isset {
  _BaseMachine_waitForUpdates_presult__isset() : success(false) {}
  bool success :1;
} _BaseMachine_waitForUpdates_presult__isset;

class BaseMachine_waitForUpdates_presult {
 public:


  virtual ~BaseMachine_waitForUpdates_presult() throw();
  std::vector<std::string> * success;

  _BaseMachine_waitForUpdates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BaseMachineClient : virtual public BaseMachineIf {
 public:
  BaseMachineClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BaseMachineClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTM(TradeMachine& _return);
  void send_getTM();
  void recv_getTM(TradeMachine& _return);
  void setUsers(const std::vector<User> & users);
  void send_setUsers(const std::vector<User> & users);
  void addUser(const User& user);
  void send_addUser(const User& user);
  void getUsers(std::vector<User> & _return);
  void send_getUsers();
  void recv_getUsers(std::vector<User> & _return);
  void getUser(User& _return, const int32_t idx);
  void send_getUser(const int32_t idx);
  void recv_getUser(User& _return);
  void setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst);
  void send_setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst);
  void setSymbolsSrc(const std::vector<Symbol> & src);
  void send_setSymbolsSrc(const std::vector<Symbol> & src);
  void setSymbolsDst(const std::vector<Symbol> & dst);
  void send_setSymbolsDst(const std::vector<Symbol> & dst);
  void getSymbolsSrc(std::vector<Symbol> & _return);
  void send_getSymbolsSrc();
  void recv_getSymbolsSrc(std::vector<Symbol> & _return);
  void getSymbolsDst(std::vector<Symbol> & _return);
  void send_getSymbolsDst();
  void recv_getSymbolsDst(std::vector<Symbol> & _return);
  void getSymbolSrc(Symbol& _return, const int32_t idx);
  void send_getSymbolSrc(const int32_t idx);
  void recv_getSymbolSrc(Symbol& _return);
  void getSymbolDst(Symbol& _return, const int32_t idx);
  void send_getSymbolDst(const int32_t idx);
  void recv_getSymbolDst(Symbol& _return);
  void clearBook();
  void send_clearBook();
  int64_t postOrder(const Order& o);
  void send_postOrder(const Order& o);
  int64_t recv_postOrder();
  int64_t postOrderWithMatch(const Order& o, const std::string& match);
  void send_postOrderWithMatch(const Order& o, const std::string& match);
  int64_t recv_postOrderWithMatch();
  int64_t matchOrders(const ID id1, const ID id2);
  void send_matchOrders(const ID id1, const ID id2);
  int64_t recv_matchOrders();
  void getOrderBook(OrderBook& _return);
  void send_getOrderBook();
  void recv_getOrderBook(OrderBook& _return);
  void getMarketData(std::map<std::string, TMarketDataPoint> & _return);
  void send_getMarketData();
  void recv_getMarketData(std::map<std::string, TMarketDataPoint> & _return);
  void waitForUpdates(std::vector<std::string> & _return);
  void send_waitForUpdates();
  void recv_waitForUpdates(std::vector<std::string> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BaseMachineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BaseMachineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BaseMachineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTM(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSymbols(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSymbolsSrc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSymbolsDst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSymbolsSrc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSymbolsDst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSymbolSrc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSymbolDst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearBook(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postOrderWithMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_matchOrders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrderBook(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMarketData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_waitForUpdates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BaseMachineProcessor(::apache::thrift::stdcxx::shared_ptr<BaseMachineIf> iface) :
    iface_(iface) {
    processMap_["getTM"] = &BaseMachineProcessor::process_getTM;
    processMap_["setUsers"] = &BaseMachineProcessor::process_setUsers;
    processMap_["addUser"] = &BaseMachineProcessor::process_addUser;
    processMap_["getUsers"] = &BaseMachineProcessor::process_getUsers;
    processMap_["getUser"] = &BaseMachineProcessor::process_getUser;
    processMap_["setSymbols"] = &BaseMachineProcessor::process_setSymbols;
    processMap_["setSymbolsSrc"] = &BaseMachineProcessor::process_setSymbolsSrc;
    processMap_["setSymbolsDst"] = &BaseMachineProcessor::process_setSymbolsDst;
    processMap_["getSymbolsSrc"] = &BaseMachineProcessor::process_getSymbolsSrc;
    processMap_["getSymbolsDst"] = &BaseMachineProcessor::process_getSymbolsDst;
    processMap_["getSymbolSrc"] = &BaseMachineProcessor::process_getSymbolSrc;
    processMap_["getSymbolDst"] = &BaseMachineProcessor::process_getSymbolDst;
    processMap_["clearBook"] = &BaseMachineProcessor::process_clearBook;
    processMap_["postOrder"] = &BaseMachineProcessor::process_postOrder;
    processMap_["postOrderWithMatch"] = &BaseMachineProcessor::process_postOrderWithMatch;
    processMap_["matchOrders"] = &BaseMachineProcessor::process_matchOrders;
    processMap_["getOrderBook"] = &BaseMachineProcessor::process_getOrderBook;
    processMap_["getMarketData"] = &BaseMachineProcessor::process_getMarketData;
    processMap_["waitForUpdates"] = &BaseMachineProcessor::process_waitForUpdates;
  }

  virtual ~BaseMachineProcessor() {}
};

class BaseMachineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BaseMachineProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BaseMachineIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BaseMachineIfFactory > handlerFactory_;
};

class BaseMachineMultiface : virtual public BaseMachineIf {
 public:
  BaseMachineMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BaseMachineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BaseMachineMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BaseMachineIf> > ifaces_;
  BaseMachineMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BaseMachineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getTM(TradeMachine& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTM(_return);
    }
    ifaces_[i]->getTM(_return);
    return;
  }

  void setUsers(const std::vector<User> & users) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUsers(users);
    }
    ifaces_[i]->setUsers(users);
  }

  void addUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(user);
    }
    ifaces_[i]->addUser(user);
  }

  void getUsers(std::vector<User> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUsers(_return);
    }
    ifaces_[i]->getUsers(_return);
    return;
  }

  void getUser(User& _return, const int32_t idx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, idx);
    }
    ifaces_[i]->getUser(_return, idx);
    return;
  }

  void setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSymbols(src, dst);
    }
    ifaces_[i]->setSymbols(src, dst);
  }

  void setSymbolsSrc(const std::vector<Symbol> & src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSymbolsSrc(src);
    }
    ifaces_[i]->setSymbolsSrc(src);
  }

  void setSymbolsDst(const std::vector<Symbol> & dst) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSymbolsDst(dst);
    }
    ifaces_[i]->setSymbolsDst(dst);
  }

  void getSymbolsSrc(std::vector<Symbol> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSymbolsSrc(_return);
    }
    ifaces_[i]->getSymbolsSrc(_return);
    return;
  }

  void getSymbolsDst(std::vector<Symbol> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSymbolsDst(_return);
    }
    ifaces_[i]->getSymbolsDst(_return);
    return;
  }

  void getSymbolSrc(Symbol& _return, const int32_t idx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSymbolSrc(_return, idx);
    }
    ifaces_[i]->getSymbolSrc(_return, idx);
    return;
  }

  void getSymbolDst(Symbol& _return, const int32_t idx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSymbolDst(_return, idx);
    }
    ifaces_[i]->getSymbolDst(_return, idx);
    return;
  }

  void clearBook() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearBook();
    }
    ifaces_[i]->clearBook();
  }

  int64_t postOrder(const Order& o) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postOrder(o);
    }
    return ifaces_[i]->postOrder(o);
  }

  int64_t postOrderWithMatch(const Order& o, const std::string& match) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postOrderWithMatch(o, match);
    }
    return ifaces_[i]->postOrderWithMatch(o, match);
  }

  int64_t matchOrders(const ID id1, const ID id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->matchOrders(id1, id2);
    }
    return ifaces_[i]->matchOrders(id1, id2);
  }

  void getOrderBook(OrderBook& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrderBook(_return);
    }
    ifaces_[i]->getOrderBook(_return);
    return;
  }

  void getMarketData(std::map<std::string, TMarketDataPoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMarketData(_return);
    }
    ifaces_[i]->getMarketData(_return);
    return;
  }

  void waitForUpdates(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->waitForUpdates(_return);
    }
    ifaces_[i]->waitForUpdates(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BaseMachineConcurrentClient : virtual public BaseMachineIf {
 public:
  BaseMachineConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BaseMachineConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTM(TradeMachine& _return);
  int32_t send_getTM();
  void recv_getTM(TradeMachine& _return, const int32_t seqid);
  void setUsers(const std::vector<User> & users);
  void send_setUsers(const std::vector<User> & users);
  void addUser(const User& user);
  void send_addUser(const User& user);
  void getUsers(std::vector<User> & _return);
  int32_t send_getUsers();
  void recv_getUsers(std::vector<User> & _return, const int32_t seqid);
  void getUser(User& _return, const int32_t idx);
  int32_t send_getUser(const int32_t idx);
  void recv_getUser(User& _return, const int32_t seqid);
  void setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst);
  void send_setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst);
  void setSymbolsSrc(const std::vector<Symbol> & src);
  void send_setSymbolsSrc(const std::vector<Symbol> & src);
  void setSymbolsDst(const std::vector<Symbol> & dst);
  void send_setSymbolsDst(const std::vector<Symbol> & dst);
  void getSymbolsSrc(std::vector<Symbol> & _return);
  int32_t send_getSymbolsSrc();
  void recv_getSymbolsSrc(std::vector<Symbol> & _return, const int32_t seqid);
  void getSymbolsDst(std::vector<Symbol> & _return);
  int32_t send_getSymbolsDst();
  void recv_getSymbolsDst(std::vector<Symbol> & _return, const int32_t seqid);
  void getSymbolSrc(Symbol& _return, const int32_t idx);
  int32_t send_getSymbolSrc(const int32_t idx);
  void recv_getSymbolSrc(Symbol& _return, const int32_t seqid);
  void getSymbolDst(Symbol& _return, const int32_t idx);
  int32_t send_getSymbolDst(const int32_t idx);
  void recv_getSymbolDst(Symbol& _return, const int32_t seqid);
  void clearBook();
  void send_clearBook();
  int64_t postOrder(const Order& o);
  int32_t send_postOrder(const Order& o);
  int64_t recv_postOrder(const int32_t seqid);
  int64_t postOrderWithMatch(const Order& o, const std::string& match);
  int32_t send_postOrderWithMatch(const Order& o, const std::string& match);
  int64_t recv_postOrderWithMatch(const int32_t seqid);
  int64_t matchOrders(const ID id1, const ID id2);
  int32_t send_matchOrders(const ID id1, const ID id2);
  int64_t recv_matchOrders(const int32_t seqid);
  void getOrderBook(OrderBook& _return);
  int32_t send_getOrderBook();
  void recv_getOrderBook(OrderBook& _return, const int32_t seqid);
  void getMarketData(std::map<std::string, TMarketDataPoint> & _return);
  int32_t send_getMarketData();
  void recv_getMarketData(std::map<std::string, TMarketDataPoint> & _return, const int32_t seqid);
  void waitForUpdates(std::vector<std::string> & _return);
  int32_t send_waitForUpdates();
  void recv_waitForUpdates(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
