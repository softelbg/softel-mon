// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BaseMachine.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::SF::TRADE::THRIFT;

class BaseMachineHandler : virtual public BaseMachineIf {
 public:
  BaseMachineHandler() {
    // Your initialization goes here
  }

  void getTM(TradeMachine& _return) {
    // Your implementation goes here
    printf("getTM\n");
  }

  void setUsers(const std::vector<User> & users) {
    // Your implementation goes here
    printf("setUsers\n");
  }

  void addUser(const User& user) {
    // Your implementation goes here
    printf("addUser\n");
  }

  void getUsers(std::vector<User> & _return) {
    // Your implementation goes here
    printf("getUsers\n");
  }

  void getUser(User& _return, const int32_t idx) {
    // Your implementation goes here
    printf("getUser\n");
  }

  void setSymbols(const std::vector<Symbol> & src, const std::vector<Symbol> & dst) {
    // Your implementation goes here
    printf("setSymbols\n");
  }

  void setSymbolsSrc(const std::vector<Symbol> & src) {
    // Your implementation goes here
    printf("setSymbolsSrc\n");
  }

  void setSymbolsDst(const std::vector<Symbol> & dst) {
    // Your implementation goes here
    printf("setSymbolsDst\n");
  }

  void getSymbolsSrc(std::vector<Symbol> & _return) {
    // Your implementation goes here
    printf("getSymbolsSrc\n");
  }

  void getSymbolsDst(std::vector<Symbol> & _return) {
    // Your implementation goes here
    printf("getSymbolsDst\n");
  }

  void getSymbolSrc(Symbol& _return, const int32_t idx) {
    // Your implementation goes here
    printf("getSymbolSrc\n");
  }

  void getSymbolDst(Symbol& _return, const int32_t idx) {
    // Your implementation goes here
    printf("getSymbolDst\n");
  }

  void clearBook() {
    // Your implementation goes here
    printf("clearBook\n");
  }

  int64_t postOrder(const Order& o) {
    // Your implementation goes here
    printf("postOrder\n");
  }

  int64_t postOrderWithMatch(const Order& o, const std::string& match) {
    // Your implementation goes here
    printf("postOrderWithMatch\n");
  }

  int64_t matchOrders(const ID id1, const ID id2) {
    // Your implementation goes here
    printf("matchOrders\n");
  }

  void getOrderBook(OrderBook& _return) {
    // Your implementation goes here
    printf("getOrderBook\n");
  }

  void getMarketData(std::map<std::string, TMarketDataPoint> & _return) {
    // Your implementation goes here
    printf("getMarketData\n");
  }

  void waitForUpdates(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("waitForUpdates\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<BaseMachineHandler> handler(new BaseMachineHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new BaseMachineProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

